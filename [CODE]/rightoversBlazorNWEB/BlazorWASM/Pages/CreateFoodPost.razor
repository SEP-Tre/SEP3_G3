@page "/CreateFoodPost"
@using HttpClients.ClientInterfaces
@using Microsoft.VisualBasic.CompilerServices
@using Domain.DTOs
@using BlazorWASM.Pages.UIComponents
@using Domain.Classes
@inject NavigationManager navMgr
@inject IFoodPostService fpService;

<div class="card">
    <h3>Create Food Post</h3>
    <div class="form-group field">
        <label>Title:</label>
        <br/>
        <input type="text" @bind="title" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Description:</label>
        <br/>
        <input type="text" @bind="description" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Category:</label>
        <br/>
        <input type="text" @bind="category" @bind:event="oninput"/>
    </div>
    <div class="form-group field">
        <label>Days left to consume: </label>
        <input type="text" @bind="daysLeftToEat" @bind:event="oninput"/>

    </div>
    <div class="form-group field">
        <label>Image url:</label>
        <input id="imageUrl" type="url" @bind="@pictureUrl"/>
        @if (!string.IsNullOrEmpty(resultMsg))
        {
            <label style="color: @color">@resultMsg</label>
        }
    </div>
    <div class="form-group field">
        <label>Start Date for Pickup</label>
        <input id="start_date" type="date" @bind="@startDate"/>
    </div>
    
    <div class="form-group field">
        <label>End Date for Pickup</label>
        <input id="end_date" type="date" @bind="@endDate"/>
    </div>

    <div class="form-group field">
        <label>Start Time for Pickup</label>
        <input id="start_time" type="time" @bind="@startTime"/>
    </div>
    
    <div class="form-group field">
        <label>End Time for Pickup</label>
        <input id="end_time" type="time" @bind="@endTime"/>
    </div>
    <div class="button-row">
            <button @onclick="@CWfields" class="acceptbtn">See Fields</button>
        </div>

    <div class="button-row">
        <button @onclick="CreateAsync" class="acceptbtn">Create</button>
    </div>
    <Modal ShowModal="showModal">
        <p>@createdDtoString</p>
        <button @onclick="@Proceed">Wonderful</button>
    </Modal>
</div>

@code {
    private string title;
    private string description;
    private string daysLeftToEat;
    private string category;
    private string pictureUrl;
    private DateOnly startDate;
    private DateOnly endDate;
    private TimeOnly startTime;
    private TimeOnly endTime;
    private string creatorUsername;
    
    private string color = "red";
    private bool showModal;
    private string createdDtoString;

    private string resultMsg;

    protected override void OnInitialized()
    {
        //TODO createdUser = get user from auth? :)
        creatorUsername = "Kamil";
        initDates();
    }

    private void CWfields()
    {
        Console.WriteLine("Title: " + title);
        Console.WriteLine("CAT: " + category);
        Console.WriteLine("desc: " + description);
        Console.WriteLine("etc");
    }

    private void initDates()
    {
        
        startDate = DateOnly.FromDateTime(DateTime.Now);
        endDate = DateOnly.FromDateTime(DateTime.Now);
        startTime = TimeOnly.MinValue;
        endTime = TimeOnly.MinValue;
    }

    private void clear()
    {
        title = "";
        category = "";
        description = "";
        pictureUrl = "";
        daysLeftToEat = "";
        initDates();
    }

    private void SeeDate()
    {
        Console.WriteLine(startDate.Day + " " + startDate.Month + " " + startDate.Year);
    }

    private async Task CreateAsync()
    {
        try
        {
            var howManyDays = IntegerType.FromString(daysLeftToEat);
            MyDate myStartDate = new MyDate(startDate.Day, startDate.Month, startDate.Year);
            MyDate myEndDate = new MyDate(endDate.Day, endDate.Month, endDate.Year);
            MyTime myStartTime = new MyTime(startTime.Hour, startTime.Minute);
            MyTime myEndTime = new MyTime(endTime.Hour, endTime.Minute);

            var newFoodPost = await fpService.Create(
                new FoodPostCreationDto(
                    title,
                    category,
                    description,
                    pictureUrl,
                    howManyDays,
                    myStartDate,
                    myEndDate,
                    myStartTime,
                    myEndTime,
                    creatorUsername
                    ));
            clear();
            resultMsg = "Food Post successfully created";
            color = "green";
            // createdDtoString = "Your Food Post <" + newFoodPost.Title + "> was created.";
            showModal = true;
        }
        catch (Exception e)
        {
            resultMsg = e.Message;
            color = "red";
        }
    }

    private void Proceed()
    {
        showModal = false;
        navMgr.NavigateTo("/");
    }

}